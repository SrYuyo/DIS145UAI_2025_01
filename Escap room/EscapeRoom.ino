#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "EscapeRoom"
  https://create.arduino.cc/cloud/things/718c4356-ac19-49ab-b60e-d8ae62e74a99
  Arduino IoT Clotud Variables description
  The following variables are automatically generated and updated when changes are made to the Thing
  int vecesGanadas;
  int vecesPerdidas;
  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.*/


// Librerias
#include "thingProperties.h"


#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>


#include <DIYables_Keypad.h>
#include <Wire.h>
#include <Adafruit_SSD1306.h>


// Variables conectadas a Arduino Cloud
// int vecesGanadas;
// int vecesPerdidas;


// Definir OLED
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);


// Definir Keypad
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {2, 3, 4, 5};
byte colPins[COLS] = {6, 7, 8, 9};
DIYables_Keypad keypad((char*)keys, rowPins, colPins, ROWS, COLS);


// Pines
const int pinBuzzer = A0;
const int pinPot = A1;
const int botones[] = {10, 11, 12, 13}; // gris, cafe, morado, naranjo
const int secuenciaCorrecta[4] = {12, 13, 10, 11}; // morado, naranjo, gris, cafe


// Variables del Juego
String fase = "Memorice";
String codigo = "2580";
String ingreso = "";
int intentos = 3;
bool juegoActivo = true;
bool mostradoAtencion = false;
bool mostradoIngreso = false;
bool mostradoPot = false;
bool mostradoAnillo = false;
bool mostradoBomba = false;
int valorPot;
int cableCorrecto = 0;
int vidas = 3;
bool conPista = false;


// String palabraClave = "MRN";
String claveEsperada = "192420";


void setup() {
  Serial.begin(9600);
  delay(1500);


  // Comprobar OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("OLED no detectada");
    while (true);
  }
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(2);
  mostrar("Escape Room\nIniciando...");


  // Activar variables
  pinMode(pinBuzzer, OUTPUT);
  for (int i = 0; i < 4; i++) {
    pinMode(botones[i], INPUT_PULLUP);
  } //


  delay(2000);


  // Arduino Cloud
  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();


  iniciarFase(fase);
}


// Loop
void loop() {
  ArduinoCloud.update();


  char key = keypad.getKey();
  // Se reinicia en cualquier momento en el que se presione #
  if (key == '#') {
    mostrar("Reinicio manual");
    reiniciarJuego();
    return;
  }
  // Comienza juego por fases
  if (!juegoActivo) return;


  if (fase == "Memorice") faseMemorice(key);
  else if (fase == "Potenciometro") fasePotenciometro(key);
  else if (fase == "Anillo") faseAnillo(key);
  else if (fase == "Bomba") faseBomba(key);
}


// Funcion Fases
void faseMemorice(char key) {
  static bool mostradoIngreso = false;
  display.setTextSize(1);

  if (!mostradoAtencion) {
    mostrar("ATENCION\nCodigo: 2580");
    delay(500);
    mostradoAtencion = true;
  }

  // Mostrar el mensaje "Fase: Memorice\nIngrese codigo" solo una vez
  if (!mostradoIngreso) {
    mostrar("Fase: Memorice\nIngrese codigo");
    mostradoIngreso = true;
  }

  if (key != NULL && isDigit(key)) {
    ingreso += key;
    mostrar("Ingreso: " + ingreso);
    tone(pinBuzzer, 1000, 100);
    delay(300);
  }

  if (ingreso.length() == 4) {
    if (ingreso == codigo) {
      mostrar("¡Correcto!\nAbre el cryptex\ndel Dragon");
      tone(pinBuzzer, 1500, 500);
      delay(2000);
      ingreso = "";
      fase = "Potenciometro"; // Cambio de fase
      mostradoIngreso = false;
      mostradoAtencion = false;
      iniciarFase(fase);
    } else {
      intentos--;
      mostrar("Incorrecto\nIntentos: " + String(intentos));
      tone(pinBuzzer, 200, 1000);
      ingreso = "";
      mostradoIngreso = false;  // Para volver a mostrar "Ingrese código" en el próximo intento
      delay(1000);
      if (intentos <= 0){ perder("No quedan intentos");}
      else {
        mostrar("ATENCION\nCodigo: 2580");
        delay(1500);
      }
    }
  }
}

void fasePotenciometro(char key) {
  display.setTextSize(1);

  if (!mostradoPot) {
    mostrar("Fase: Potenciometro\nResuelva X"); //Usa uno de los papeles para ver la ecuacion. Se muestra solo una vez
    mostradoPot = true;
  }

  int lectura = analogRead(pinPot);
  valorPot = map(lectura, 0, 1023, 0, 100);

  static int ultimoValor = -1;
  if (valorPot != ultimoValor) {
    mostrar("x = " + String(valorPot)); // Solo se actualiza si cambia
    ultimoValor = valorPot;
  }

  if (key == '*') {
    if (valorPot == 32) {
      mostrar("¡Correcto!\n Resuelve el acertijo!");
      tone(pinBuzzer, 1500, 500);
      delay(2000);
      fase = "Anillo";
      mostradoPot = false;
      iniciarFase(fase); // Cambio de fase
    } else {
      perder("No sabes matematica?\nIncorrecta");
      //tone(pinBuzzer, 200, 300);
    }
  }

  delay(100);
}

void faseAnillo(char key) {
  display.setTextSize(1);

  if (!mostradoAnillo) {
    mostrar("Fase: Decodificar\nAbre el cryptex y\nencuentra la palabra\nSolo una oportunidad!");
    mostradoAnillo = true;
  }
  
  if (key != NULL && isDigit(key)) {
    ingreso += key;
    mostrar("Ingreso: " + ingreso);
    tone(pinBuzzer, 1000, 100);
    delay(300);
  }

  if (ingreso.length() == claveEsperada.length()) {
    if (ingreso == claveEsperada) {
      mostrar("¡Correcto!");
      tone(pinBuzzer, 1500, 500);
      delay(1000);
      fase = "Bomba"; // Cambio de fase
      mostradoAnillo = false;
      seleccionarNivel();
    } else {
      perder("Decodificacion\nincorrecta");
    }
    ingreso = "";
  }
}

void faseBomba(char key) {
  display.setTextSize(1);

  // Mostrar el mensaje de la fase solo una vez
  if (!mostradoBomba) {
    if (conPista) { //Solo funciona si presiona el nivel que quiere
      mostrar("Fase: Bomba\nTe vamos a dar\nel orden de los\npergaminos.\nPreguntanos!");
    } else {
      mostrar("Fase: Bomba\nCortar cables\nen orden!");
    }
    mostradoBomba = true;
  }
  
  // Orden correcto de los botones
  int pinEsperado = secuenciaCorrecta[cableCorrecto];

  // Orden usuario
  if (digitalRead(pinEsperado) == LOW) {
    mostrar("Cable #" + String(cableCorrecto + 1) + " OK");
    tone(pinBuzzer, 1500, 300);
    cableCorrecto++;
    delay(1000);
  }

  for (int i = 0; i < 4; i++) {
    if (i != cableCorrecto && digitalRead(botones[i]) == LOW) {
      vidas--;
      mostrar("¡Cable Equivocado!\nVidas: " + String(vidas));
      tone(pinBuzzer, 300, 500);
      delay(1000);
      if (vidas <= 0) {
        perder("Cable equivocado");
        return;
      }
    }
  }

  if (cableCorrecto >= 4) {
    victoria();
    mostradoBomba = false;  
  }
}


// Funcion para seleccionar el nivel fase Bomba
void seleccionarNivel() {

  mostrar("Selecciona nivel:\nA: 3 vidas\nB: 1 vida + pista\nC: ???");
  
  while (true) {
    char key = keypad.getKey();
    if (key == 'A') {
      vidas = 3;
      conPista = false;
      mostrar("Nivel A:\n3 vidas");
      break;
    } else if (key == 'B') {
      vidas = 1;
      conPista = true;
      mostrar("Nivel B:\n1 vida + pista");
      break;
    } else if (key == 'C') {
      perder("Nivel invalido!\nTonto");
      return;
    }
    delay(100);
  }
  delay(1000);
}

// Funcion de victoria + contador + tono
void victoria() {
  display.setTextSize(2);
  mostrar("ESCAPASTE!!!");
  vecesGanadas++;
  juegoActivo = false;
  
  // Tono
  tone(pinBuzzer, 523, 200);
  delay(200);
  tone(pinBuzzer, 659, 200);
  delay(200);
  tone(pinBuzzer, 784, 400);
  delay(400);
}

// Funcion de perdida + contador + tono
void perder(String motivo) {
  display.setTextSize(2);
  mostrar("KABOOM\n" + motivo);
  vecesPerdidas++;
  juegoActivo = false;

  // Tono
  tone(pinBuzzer, 200, 500);
  delay(600);
  tone(pinBuzzer, 150, 1000);
  delay(1500);

  reiniciarJuego();
}

// Funcion de Reinicio, por perder o por presionar #
void reiniciarJuego() {
  juegoActivo = true;
  mostradoAtencion = false;
  mostradoIngreso = false;
  mostradoPot = false;
  mostradoAnillo = false;
  mostradoBomba = false;
  fase = "Memorice";
  intentos = 3;
  ingreso = "";
  cableCorrecto = 0;
  vidas = 3;
  conPista = false;
  iniciarFase(fase);
}

// Utilidades
void mostrar(String texto) {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println(texto);
  display.display();
  Serial.println(texto);
}

void iniciarFase(String nombreFase) {
  display.setTextSize(2);
  mostrar("Iniciando fase:\n" + nombreFase);
  ingreso = "";
  cableCorrecto = 0;
  delay(1500);
}